import torch
import torch.nn as nn
import torch.nn.functional as F
class Inception(nn.Module):
    def __init__(self, infmap, fmap1, fmap13, fmap3, fmap15, fmap5, fpool, auxclassifier = False):
        super().__init__(self)  
        self.conv1 = nn.Conv2d(infmap, fmap1, 1, 1)
        self.conv13 = nn.Conv2d(infmap, fmap13, 1, 1)
        self.conv15 = nn.Conv2d(infmap, fmap15, 1, 1)
        self.pool1 = nn.MaxPool2d(3, 1, 1)
        self.conv3 = nn.Conv2d(fmap13, fmap3, 3, 1, 1)
        self.conv5 = nn.Conv2d(fmap15, fmap5, 5, 1, 2)
        self.convpool = nn.Conv2d(infmap, fpool, 1, 1)
        #intermediate softmax output
        self.auxclassifier = auxclassifier
        if auxclassifier == True:
            self.avgpool = nn.AvgPool2d(5, 3)
            self.auxconv = nn.Conv2d(infmap, 128, 1, 1)
            self.linear1 = nn.Linear(128, 1024)
            self.dropout = nn.Dropout(0.7)
            self.linear2 = nn.Linear(1024, 1000)
            self.softmax = nn.Softmax(1000)

    def forward(self, x):
        y1 = self.conv1(x)
        y1 = F.relu(y1)
        y3 = self.conv13(x)
        y3 = F.relu(y3)
        y3 = self.conv3(y3)
        y3 = F.relu(y3)
        y5 = self.conv15(x)
        y5 = F.relu(y5)
        y5 = self.conv5(y5)
        y5 = F.relu(y5)
        ypool = self.pool1(x)
        ypool = self.convpool(ypool)
        ypool = F.relu(ypool)
        y = torch.cat([y1, y3, y5, ypool], 1)
        if self.auxclassifier == True:
            ax = self.avgpool(x)
            ax = self.auxconv(ax)
            ax = F.relu(ax)
            ax = torch.flatten(ax, 1)
            ax = self.linear1(ax)
            ax = F.relu(ax)
            ax = self.dropout(ax)
            ax = self.linear2(ax)
            F.relu(ax)
            ax = self.softmax(ax)
            return y, ax
        else:
            return y
class GoogleNet(nn.Module):
    def __init__(self):
        super().__init__(self)
        self.conv1 = nn.Conv2d(3, 64, 7, 2)
        self.mxpool1 = nn.MaxPool2d(3, 2)
        self.lrn1 = nn.LocalResponseNorm(3, 1.0, 0.75, 1.0)
        self.conv21 = nn.Conv2d(64, 64, 1, 1)
        self.conv2 = nn.Conv2d(64, 192, 3, 1)
        self.lrn2 = nn.LocalResponseNorm(3, 1.0, 0.75, 1.0)
        self.mxpool2 = nn.Maxpool2(3, 2)
        self.inception3a = Inception(192, 64, 96, 128, 16, 32, 32)
        self.inception3b = Inception(256, 128, 128, 192, 32, 96, 64)
        self.mxpool3 = nn.Maxpool2(3, 2)
        self.inception4a = Inception(480, 192, 96, 208, 16, 48, 64)
        self.inception4b = Inception(512, 112, 224, 24, 64, 64, True)
        self.inception4c = Inception(512, 128, 128, 256, 24, 64, 64)
        self.inception4d = Inception(512, 112, 144, 288, 32, 64, 64)
        self.inception4e = Inception(528, 256, 160, 320, 32, 128, 128, True)
        self.mxpool4 = nn.MaxPool2d(3, 2)
        self.inception5a = Inception(832, 256, 160, 320, 32, 128, 128)
        self.inception5b = Inception(832, 384, 192, 384, 48, 128, 128)
        self.avgpool = nn.AvgPool2d(7, 1)
        self.drpout = nn.Dropout(0.4)
        self.linear1 = nn.Linear(1024, 1000)
        self.softmax = nn.Softmax(1000)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.mxpool1(x)
        x = self.lrn1(x)
        x = self.conv21(x)
        x = F.relu(x)
        x = self.lrn2(x)
        x = self.mxpool2(x)
        x = self.inception3a(x)
        x = self.inception3b(x)
        x = self.mxpool3(x)
        x = self.inception4a(x)
        x, softmax0 = self.inception4b(x)
        x = self.inception4c(x)
        x = self.inception4d(x)
        x, softmax1 = self.inception4e(x)
        x = self.mxpool4(x)
        x = self.inception5a(x)
        x = self.inception5b(x)
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.drpout(x)
        x = self.linear1(x)
        x = self.softmax(x)
        return softmax0, softmax1, x
